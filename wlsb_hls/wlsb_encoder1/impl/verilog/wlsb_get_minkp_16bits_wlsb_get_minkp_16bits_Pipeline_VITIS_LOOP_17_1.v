// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module wlsb_get_minkp_16bits_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wlsb_window_used_address0,
        wlsb_window_used_ce0,
        wlsb_window_used_q0,
        sub_ln28,
        icmp_ln31_1,
        add_ln29_4,
        value_r,
        icmp_ln25,
        sub_ln28_1,
        icmp_ln31_5,
        add_ln29_5,
        icmp_ln25_1,
        sub_ln28_2,
        icmp_ln31_8,
        add_ln29_6,
        icmp_ln25_2,
        sub_ln28_3,
        icmp_ln31_10,
        add_ln29_7,
        icmp_ln25_3,
        k_out,
        k_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] wlsb_window_used_address0;
output   wlsb_window_used_ce0;
input  [31:0] wlsb_window_used_q0;
input  [15:0] sub_ln28;
input  [0:0] icmp_ln31_1;
input  [15:0] add_ln29_4;
input  [15:0] value_r;
input  [0:0] icmp_ln25;
input  [15:0] sub_ln28_1;
input  [0:0] icmp_ln31_5;
input  [15:0] add_ln29_5;
input  [0:0] icmp_ln25_1;
input  [15:0] sub_ln28_2;
input  [0:0] icmp_ln31_8;
input  [15:0] add_ln29_6;
input  [0:0] icmp_ln25_2;
input  [15:0] sub_ln28_3;
input  [0:0] icmp_ln31_10;
input  [15:0] add_ln29_7;
input  [0:0] icmp_ln25_3;
output  [3:0] k_out;
output   k_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg wlsb_window_used_ce0;
reg k_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln25_3_read_read_fu_100_p2;
wire   [0:0] icmp_ln25_2_read_read_fu_124_p2;
wire   [0:0] icmp_ln25_1_read_read_fu_148_p2;
wire   [0:0] icmp_ln25_read_read_fu_172_p2;
wire   [3:0] empty_fu_279_p1;
reg   [3:0] empty_reg_611;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_283_p2;
reg   [0:0] icmp_ln17_reg_616;
wire   [4:0] k_2_fu_289_p2;
reg   [4:0] k_2_reg_620;
wire   [0:0] and_ln31_fu_331_p2;
wire   [0:0] and_ln32_1_fu_347_p2;
wire   [0:0] and_ln31_1_fu_379_p2;
wire   [0:0] and_ln32_3_fu_395_p2;
wire   [0:0] and_ln31_2_fu_427_p2;
wire   [0:0] and_ln32_5_fu_443_p2;
wire   [0:0] and_ln31_3_fu_475_p2;
wire   [0:0] and_ln32_7_fu_491_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] i_0_lcssa_reg_222;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_263_p4;
reg   [0:0] UnifiedRetVal_reg_259;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln39_fu_497_p1;
reg   [4:0] k_fu_96;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln39_fu_502_p2;
wire   [15:0] k_cast_fu_295_p1;
wire   [15:0] shl_ln19_fu_299_p2;
wire   [15:0] add_ln29_fu_305_p2;
wire   [0:0] icmp_ln31_fu_310_p2;
wire   [0:0] icmp_ln31_2_fu_321_p2;
wire   [0:0] xor_ln31_fu_315_p2;
wire   [0:0] or_ln31_fu_326_p2;
wire   [0:0] and_ln32_fu_342_p2;
wire   [0:0] icmp_ln32_fu_337_p2;
wire   [15:0] add_ln29_1_fu_353_p2;
wire   [0:0] icmp_ln31_3_fu_358_p2;
wire   [0:0] icmp_ln31_4_fu_369_p2;
wire   [0:0] xor_ln31_1_fu_363_p2;
wire   [0:0] or_ln31_1_fu_374_p2;
wire   [0:0] and_ln32_2_fu_390_p2;
wire   [0:0] icmp_ln32_1_fu_385_p2;
wire   [15:0] add_ln29_2_fu_401_p2;
wire   [0:0] icmp_ln31_6_fu_406_p2;
wire   [0:0] icmp_ln31_7_fu_417_p2;
wire   [0:0] xor_ln31_2_fu_411_p2;
wire   [0:0] or_ln31_2_fu_422_p2;
wire   [0:0] and_ln32_4_fu_438_p2;
wire   [0:0] icmp_ln32_2_fu_433_p2;
wire   [15:0] add_ln29_3_fu_449_p2;
wire   [0:0] icmp_ln31_9_fu_454_p2;
wire   [0:0] icmp_ln31_11_fu_465_p2;
wire   [0:0] xor_ln31_3_fu_459_p2;
wire   [0:0] or_ln31_3_fu_470_p2;
wire   [0:0] and_ln32_6_fu_486_p2;
wire   [0:0] icmp_ln32_3_fu_481_p2;
reg   [0:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_263_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_616 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_259 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_259 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (((((((((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2)) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2))) | ((1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2))) | ((1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2))) | ((1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2))) | ((icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln31_3_fu_475_p2)))) | ((1'b1 == ap_CS_fsm_state2) & (((((((((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2)) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2))) | ((1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2))) | ((1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2))) | ((1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2))) | ((1'd0 == and_ln31_3_fu_475_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd0) & (1'd1 == and_ln32_7_fu_491_p2)))))) begin
        i_0_lcssa_reg_222 <= 3'd3;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (((((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln31_2_fu_427_p2)) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln31_2_fu_427_p2))) | ((1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln31_2_fu_427_p2))) | ((icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln31_2_fu_427_p2)))) | ((1'b1 == ap_CS_fsm_state2) & (((((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln32_5_fu_443_p2)) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln32_5_fu_443_p2))) | ((1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln32_5_fu_443_p2))) | ((1'd0 == and_ln31_2_fu_427_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd0) & (1'd1 == and_ln32_5_fu_443_p2)))))) begin
        i_0_lcssa_reg_222 <= 3'd2;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd0) & (1'd1 == and_ln31_1_fu_379_p2)) | ((icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd0) & (1'd1 == and_ln31_1_fu_379_p2)))) | ((1'b1 == ap_CS_fsm_state2) & (((1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd0) & (1'd1 == and_ln32_3_fu_395_p2)) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd0) & (1'd1 == and_ln32_3_fu_395_p2)))))) begin
        i_0_lcssa_reg_222 <= 3'd1;
    end else if ((((1'd0 == and_ln31_fu_331_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln32_1_fu_347_p2)) | ((icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln31_fu_331_p2)))) begin
        i_0_lcssa_reg_222 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (((((((((((((((((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0)) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1))) | ((1'd0 == and_ln31_fu_331_p2) & (1'd0 == and_ln32_1_fu_347_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))) | ((1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1))) | ((1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))) | ((1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1))) | ((1'd0 == and_ln32_3_fu_395_p2) & (1'd0 == and_ln31_1_fu_379_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))) | ((1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1))) | ((1'd0 == and_ln32_5_fu_443_p2) & (1'd0 == and_ln31_2_fu_427_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))) | ((1'd0 == and_ln32_7_fu_491_p2) & (1'd0 == and_ln31_3_fu_475_p2) & (icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1))) | ((icmp_ln17_fu_283_p2 == 1'd0) & (icmp_ln25_read_read_fu_172_p2 == 1'd1) & (icmp_ln25_1_read_read_fu_148_p2 == 1'd1) & (icmp_ln25_2_read_read_fu_124_p2 == 1'd1) & (icmp_ln25_3_read_read_fu_100_p2 == 1'd1))))) begin
        i_0_lcssa_reg_222 <= 3'd4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_fu_96 <= 5'd0;
    end else if (((icmp_ln17_reg_616 == 1'd0) & (icmp_ln39_fu_502_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_fu_96 <= k_2_reg_620;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_611 <= empty_fu_279_p1;
        icmp_ln17_reg_616 <= icmp_ln17_fu_283_p2;
        k_2_reg_620 <= k_2_fu_289_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_616 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_263_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_263_p4 = UnifiedRetVal_reg_259;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_263_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln17_reg_616 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        k_out_ap_vld = 1'b1;
    end else begin
        k_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        wlsb_window_used_ce0 = 1'b1;
    end else begin
        wlsb_window_used_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln17_reg_616 == 1'd0) & (icmp_ln39_fu_502_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln17_reg_616 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_1_fu_353_p2 = (add_ln29_5 + shl_ln19_fu_299_p2);

assign add_ln29_2_fu_401_p2 = (add_ln29_6 + shl_ln19_fu_299_p2);

assign add_ln29_3_fu_449_p2 = (add_ln29_7 + shl_ln19_fu_299_p2);

assign add_ln29_fu_305_p2 = (add_ln29_4 + shl_ln19_fu_299_p2);

assign and_ln31_1_fu_379_p2 = (xor_ln31_1_fu_363_p2 & or_ln31_1_fu_374_p2);

assign and_ln31_2_fu_427_p2 = (xor_ln31_2_fu_411_p2 & or_ln31_2_fu_422_p2);

assign and_ln31_3_fu_475_p2 = (xor_ln31_3_fu_459_p2 & or_ln31_3_fu_470_p2);

assign and_ln31_fu_331_p2 = (xor_ln31_fu_315_p2 & or_ln31_fu_326_p2);

assign and_ln32_1_fu_347_p2 = (icmp_ln32_fu_337_p2 & and_ln32_fu_342_p2);

assign and_ln32_2_fu_390_p2 = (icmp_ln31_5 & icmp_ln31_4_fu_369_p2);

assign and_ln32_3_fu_395_p2 = (icmp_ln32_1_fu_385_p2 & and_ln32_2_fu_390_p2);

assign and_ln32_4_fu_438_p2 = (icmp_ln31_8 & icmp_ln31_7_fu_417_p2);

assign and_ln32_5_fu_443_p2 = (icmp_ln32_2_fu_433_p2 & and_ln32_4_fu_438_p2);

assign and_ln32_6_fu_486_p2 = (icmp_ln31_11_fu_465_p2 & icmp_ln31_10);

assign and_ln32_7_fu_491_p2 = (icmp_ln32_3_fu_481_p2 & and_ln32_6_fu_486_p2);

assign and_ln32_fu_342_p2 = (icmp_ln31_2_fu_321_p2 & icmp_ln31_1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_fu_279_p1 = k_fu_96[3:0];

assign icmp_ln17_fu_283_p2 = ((k_fu_96 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln25_1_read_read_fu_148_p2 = icmp_ln25_1;

assign icmp_ln25_2_read_read_fu_124_p2 = icmp_ln25_2;

assign icmp_ln25_3_read_read_fu_100_p2 = icmp_ln25_3;

assign icmp_ln25_read_read_fu_172_p2 = icmp_ln25;

assign icmp_ln31_11_fu_465_p2 = ((add_ln29_3_fu_449_p2 < value_r) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_321_p2 = ((add_ln29_fu_305_p2 < value_r) ? 1'b1 : 1'b0);

assign icmp_ln31_3_fu_358_p2 = ((add_ln29_1_fu_353_p2 < sub_ln28_1) ? 1'b1 : 1'b0);

assign icmp_ln31_4_fu_369_p2 = ((add_ln29_1_fu_353_p2 < value_r) ? 1'b1 : 1'b0);

assign icmp_ln31_6_fu_406_p2 = ((add_ln29_2_fu_401_p2 < sub_ln28_2) ? 1'b1 : 1'b0);

assign icmp_ln31_7_fu_417_p2 = ((add_ln29_2_fu_401_p2 < value_r) ? 1'b1 : 1'b0);

assign icmp_ln31_9_fu_454_p2 = ((add_ln29_3_fu_449_p2 < sub_ln28_3) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_310_p2 = ((add_ln29_fu_305_p2 < sub_ln28) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_385_p2 = ((sub_ln28_1 > add_ln29_1_fu_353_p2) ? 1'b1 : 1'b0);

assign icmp_ln32_2_fu_433_p2 = ((sub_ln28_2 > add_ln29_2_fu_401_p2) ? 1'b1 : 1'b0);

assign icmp_ln32_3_fu_481_p2 = ((sub_ln28_3 > add_ln29_3_fu_449_p2) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_337_p2 = ((sub_ln28 > add_ln29_fu_305_p2) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_502_p2 = ((wlsb_window_used_q0 == 32'd0) ? 1'b1 : 1'b0);

assign k_2_fu_289_p2 = (k_fu_96 + 5'd1);

assign k_cast_fu_295_p1 = k_fu_96;

assign k_out = empty_reg_611;

assign or_ln31_1_fu_374_p2 = (icmp_ln31_5 | icmp_ln31_4_fu_369_p2);

assign or_ln31_2_fu_422_p2 = (icmp_ln31_8 | icmp_ln31_7_fu_417_p2);

assign or_ln31_3_fu_470_p2 = (icmp_ln31_11_fu_465_p2 | icmp_ln31_10);

assign or_ln31_fu_326_p2 = (icmp_ln31_2_fu_321_p2 | icmp_ln31_1);

assign shl_ln19_fu_299_p2 = 16'd1 << k_cast_fu_295_p1;

assign wlsb_window_used_address0 = zext_ln39_fu_497_p1;

assign xor_ln31_1_fu_363_p2 = (icmp_ln31_3_fu_358_p2 ^ 1'd1);

assign xor_ln31_2_fu_411_p2 = (icmp_ln31_6_fu_406_p2 ^ 1'd1);

assign xor_ln31_3_fu_459_p2 = (icmp_ln31_9_fu_454_p2 ^ 1'd1);

assign xor_ln31_fu_315_p2 = (icmp_ln31_fu_310_p2 ^ 1'd1);

assign zext_ln39_fu_497_p1 = i_0_lcssa_reg_222;

endmodule //wlsb_get_minkp_16bits_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1
