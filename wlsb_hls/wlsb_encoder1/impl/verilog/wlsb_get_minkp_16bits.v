// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="wlsb_get_minkp_16bits_wlsb_get_minkp_16bits,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu15eg-ffrb1156-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.382000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=136,HLS_SYN_LUT=670,HLS_VERSION=2022_2}" *)

module wlsb_get_minkp_16bits (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wlsb,
        value_r,
        p,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2055:0] wlsb;
input  [15:0] value_r;
input  [31:0] p;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] trunc_ln9_fu_106_p1;
reg   [7:0] trunc_ln9_reg_240;
wire   [0:0] icmp_ln9_fu_111_p2;
reg   [0:0] icmp_ln9_reg_245;
wire   [15:0] sub_ln26_fu_131_p2;
reg   [15:0] sub_ln26_reg_249;
wire   [0:0] icmp_ln29_1_fu_138_p2;
reg   [0:0] icmp_ln29_1_reg_254;
wire   [15:0] sub_ln26_1_fu_155_p2;
reg   [15:0] sub_ln26_1_reg_259;
wire   [0:0] icmp_ln29_5_fu_162_p2;
reg   [0:0] icmp_ln29_5_reg_264;
wire   [15:0] sub_ln26_2_fu_179_p2;
reg   [15:0] sub_ln26_2_reg_269;
wire   [0:0] icmp_ln29_8_fu_186_p2;
reg   [0:0] icmp_ln29_8_reg_274;
wire   [15:0] sub_ln26_3_fu_203_p2;
reg   [15:0] sub_ln26_3_reg_279;
wire   [0:0] icmp_ln29_10_fu_210_p2;
reg   [0:0] icmp_ln29_10_reg_284;
wire   [0:0] grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_return;
reg   [0:0] targetBlock_reg_289;
wire    ap_CS_fsm_state2;
wire    grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start;
wire    grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_done;
wire    grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_idle;
wire    grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_ready;
wire   [3:0] grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_k_out;
wire    grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_k_out_ap_vld;
wire   [4:0] zext_ln44_fu_220_p1;
reg   [4:0] ap_phi_mux_bits_nr_phi_fu_80_p6;
reg   [4:0] bits_nr_reg_76;
wire    ap_CS_fsm_state3;
reg    grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start_reg;
reg   [3:0] k_loc_fu_54;
wire   [15:0] trunc_ln_fu_121_p4;
wire   [15:0] empty_fu_117_p1;
wire   [15:0] trunc_ln25_1_fu_145_p4;
wire   [15:0] trunc_ln25_2_fu_169_p4;
wire   [15:0] trunc_ln25_3_fu_193_p4;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start_reg = 1'b0;
end

wlsb_get_minkp_16bits_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1 grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start),
    .ap_done(grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_done),
    .ap_idle(grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_idle),
    .ap_ready(grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_ready),
    .trunc_ln9(trunc_ln9_reg_240),
    .sub_ln26(sub_ln26_reg_249),
    .value_r(value_r),
    .icmp_ln29_1(icmp_ln29_1_reg_254),
    .sub_ln26_1(sub_ln26_1_reg_259),
    .icmp_ln29_5(icmp_ln29_5_reg_264),
    .sub_ln26_2(sub_ln26_2_reg_269),
    .icmp_ln29_8(icmp_ln29_8_reg_274),
    .sub_ln26_3(sub_ln26_3_reg_279),
    .icmp_ln29_10(icmp_ln29_10_reg_284),
    .k_out(grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_k_out),
    .k_out_ap_vld(grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_k_out_ap_vld),
    .ap_return(grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (icmp_ln9_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_ready == 1'b1)) begin
            grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((targetBlock_reg_289 == 1'd1) & (icmp_ln9_reg_245 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (icmp_ln9_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bits_nr_reg_76 <= 5'd16;
    end else if (((targetBlock_reg_289 == 1'd0) & (icmp_ln9_reg_245 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        bits_nr_reg_76 <= zext_ln44_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln29_10_reg_284 <= icmp_ln29_10_fu_210_p2;
        icmp_ln29_1_reg_254 <= icmp_ln29_1_fu_138_p2;
        icmp_ln29_5_reg_264 <= icmp_ln29_5_fu_162_p2;
        icmp_ln29_8_reg_274 <= icmp_ln29_8_fu_186_p2;
        sub_ln26_1_reg_259 <= sub_ln26_1_fu_155_p2;
        sub_ln26_2_reg_269 <= sub_ln26_2_fu_179_p2;
        sub_ln26_3_reg_279 <= sub_ln26_3_fu_203_p2;
        sub_ln26_reg_249 <= sub_ln26_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln9_reg_245 <= icmp_ln9_fu_111_p2;
        trunc_ln9_reg_240 <= trunc_ln9_fu_106_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_k_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_loc_fu_54 <= grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_k_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        targetBlock_reg_289 <= grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_return;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_245 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        if ((targetBlock_reg_289 == 1'd1)) begin
            ap_phi_mux_bits_nr_phi_fu_80_p6 = 5'd16;
        end else if ((targetBlock_reg_289 == 1'd0)) begin
            ap_phi_mux_bits_nr_phi_fu_80_p6 = zext_ln44_fu_220_p1;
        end else begin
            ap_phi_mux_bits_nr_phi_fu_80_p6 = bits_nr_reg_76;
        end
    end else begin
        ap_phi_mux_bits_nr_phi_fu_80_p6 = bits_nr_reg_76;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln9_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((ap_start == 1'b1) & (icmp_ln9_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = ap_phi_mux_bits_nr_phi_fu_80_p6;

assign empty_fu_117_p1 = p[15:0];

assign grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start = grp_wlsb_get_minkp_16bits_Pipeline_VITIS_LOOP_17_1_fu_90_ap_start_reg;

assign icmp_ln29_10_fu_210_p2 = ((sub_ln26_3_fu_203_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_138_p2 = ((sub_ln26_fu_131_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_162_p2 = ((sub_ln26_1_fu_155_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_186_p2 = ((sub_ln26_2_fu_179_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_111_p2 = ((trunc_ln9_fu_106_p1 == 8'd0) ? 1'b1 : 1'b0);

assign sub_ln26_1_fu_155_p2 = (trunc_ln25_1_fu_145_p4 - empty_fu_117_p1);

assign sub_ln26_2_fu_179_p2 = (trunc_ln25_2_fu_169_p4 - empty_fu_117_p1);

assign sub_ln26_3_fu_203_p2 = (trunc_ln25_3_fu_193_p4 - empty_fu_117_p1);

assign sub_ln26_fu_131_p2 = (trunc_ln_fu_121_p4 - empty_fu_117_p1);

assign trunc_ln25_1_fu_145_p4 = {{wlsb[55:40]}};

assign trunc_ln25_2_fu_169_p4 = {{wlsb[87:72]}};

assign trunc_ln25_3_fu_193_p4 = {{wlsb[119:104]}};

assign trunc_ln9_fu_106_p1 = wlsb[7:0];

assign trunc_ln_fu_121_p4 = {{wlsb[23:8]}};

assign zext_ln44_fu_220_p1 = k_loc_fu_54;

endmodule //wlsb_get_minkp_16bits
