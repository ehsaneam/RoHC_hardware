// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="wlsb_get_minkp_32bits_wlsb_get_minkp_32bits,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu15eg-ffrb1156-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.744000,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=359,HLS_SYN_LUT=1184,HLS_VERSION=2022_2}" *)

module wlsb_get_minkp_32bits (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wlsb_count,
        wlsb_window_value_address0,
        wlsb_window_value_ce0,
        wlsb_window_value_q0,
        wlsb_window_value_address1,
        wlsb_window_value_ce1,
        wlsb_window_value_q1,
        wlsb_window_used_address0,
        wlsb_window_used_ce0,
        wlsb_window_used_q0,
        wlsb_window_used_address1,
        wlsb_window_used_ce1,
        wlsb_window_used_q1,
        value_r,
        p,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] wlsb_count;
output  [5:0] wlsb_window_value_address0;
output   wlsb_window_value_ce0;
input  [31:0] wlsb_window_value_q0;
output  [5:0] wlsb_window_value_address1;
output   wlsb_window_value_ce1;
input  [31:0] wlsb_window_value_q1;
output  [5:0] wlsb_window_used_address0;
output   wlsb_window_used_ce0;
input  [31:0] wlsb_window_used_q0;
output  [5:0] wlsb_window_used_address1;
output   wlsb_window_used_ce1;
input  [31:0] wlsb_window_used_q1;
input  [31:0] value_r;
input  [31:0] p;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] wlsb_window_value_address0;
reg wlsb_window_value_ce0;
reg[5:0] wlsb_window_value_address1;
reg wlsb_window_value_ce1;
reg[5:0] wlsb_window_used_address0;
reg wlsb_window_used_ce0;
reg[5:0] wlsb_window_used_address1;
reg wlsb_window_used_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln8_fu_208_p2;
reg   [0:0] icmp_ln8_reg_316;
reg   [31:0] wlsb_window_value_load_reg_340;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_196_p2;
reg   [0:0] icmp_ln26_reg_345;
reg   [31:0] wlsb_window_value_load_1_reg_350;
wire   [0:0] grp_fu_202_p2;
reg   [0:0] icmp_ln26_1_reg_355;
reg   [0:0] icmp_ln26_2_reg_380;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln26_3_reg_385;
wire   [31:0] sub_ln29_3_fu_214_p2;
reg   [31:0] sub_ln29_3_reg_390;
wire   [0:0] icmp_ln32_10_fu_219_p2;
reg   [0:0] icmp_ln32_10_reg_395;
wire   [31:0] sub_ln29_2_fu_224_p2;
reg   [31:0] sub_ln29_2_reg_400;
wire   [0:0] icmp_ln32_8_fu_229_p2;
reg   [0:0] icmp_ln32_8_reg_405;
wire   [31:0] sub_ln29_1_fu_234_p2;
reg   [31:0] sub_ln29_1_reg_410;
wire   [0:0] icmp_ln32_5_fu_238_p2;
reg   [0:0] icmp_ln32_5_reg_415;
wire   [31:0] sub_ln29_fu_243_p2;
reg   [31:0] sub_ln29_reg_420;
wire   [0:0] icmp_ln32_1_fu_247_p2;
reg   [0:0] icmp_ln32_1_reg_425;
wire   [31:0] add_ln30_fu_252_p2;
reg   [31:0] add_ln30_reg_430;
wire   [31:0] add_ln30_6_fu_258_p2;
reg   [31:0] add_ln30_6_reg_435;
wire   [31:0] add_ln30_5_fu_264_p2;
reg   [31:0] add_ln30_5_reg_440;
wire   [31:0] add_ln30_4_fu_270_p2;
reg   [31:0] add_ln30_4_reg_445;
wire   [1:0] grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_return;
reg   [1:0] targetBlock_reg_450;
wire    ap_CS_fsm_state5;
wire    grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start;
wire    grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_done;
wire    grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_idle;
wire    grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_ready;
wire   [4:0] grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_k_out;
wire    grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_k_out_ap_vld;
wire   [5:0] k_cast_cast_fu_284_p1;
reg   [5:0] ap_phi_mux_bits_nr_phi_fu_164_p6;
reg   [5:0] bits_nr_reg_160;
wire    ap_CS_fsm_state6;
wire   [0:0] cond_fu_279_p2;
reg    grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [4:0] k_loc_fu_48;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start_reg = 1'b0;
end

wlsb_get_minkp_32bits_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1 grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start),
    .ap_done(grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_done),
    .ap_idle(grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_idle),
    .ap_ready(grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_ready),
    .sub_ln29(sub_ln29_reg_420),
    .icmp_ln32_1(icmp_ln32_1_reg_425),
    .add_ln30_4(add_ln30_4_reg_445),
    .value_r(value_r),
    .icmp_ln26(icmp_ln26_reg_345),
    .sub_ln29_1(sub_ln29_1_reg_410),
    .icmp_ln32_5(icmp_ln32_5_reg_415),
    .add_ln30_5(add_ln30_5_reg_440),
    .icmp_ln26_1(icmp_ln26_1_reg_355),
    .sub_ln29_2(sub_ln29_2_reg_400),
    .icmp_ln32_8(icmp_ln32_8_reg_405),
    .add_ln30_6(add_ln30_6_reg_435),
    .icmp_ln26_2(icmp_ln26_2_reg_380),
    .sub_ln29_3(sub_ln29_3_reg_390),
    .icmp_ln32_10(icmp_ln32_10_reg_395),
    .add_ln30_7(add_ln30_reg_430),
    .icmp_ln26_3(icmp_ln26_3_reg_385),
    .k_out(grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_k_out),
    .k_out_ap_vld(grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_k_out_ap_vld),
    .ap_return(grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start_reg <= 1'b1;
        end else if ((grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_ready == 1'b1)) begin
            grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln8_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln8_reg_316 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cond_fu_279_p2 == 1'd1)))) begin
        bits_nr_reg_160 <= 6'd32;
    end else if (((icmp_ln8_reg_316 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cond_fu_279_p2 == 1'd0))) begin
        bits_nr_reg_160 <= k_cast_cast_fu_284_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln30_4_reg_445 <= add_ln30_4_fu_270_p2;
        add_ln30_5_reg_440 <= add_ln30_5_fu_264_p2;
        add_ln30_6_reg_435 <= add_ln30_6_fu_258_p2;
        add_ln30_reg_430 <= add_ln30_fu_252_p2;
        icmp_ln26_2_reg_380 <= grp_fu_196_p2;
        icmp_ln26_3_reg_385 <= grp_fu_202_p2;
        icmp_ln32_10_reg_395 <= icmp_ln32_10_fu_219_p2;
        icmp_ln32_1_reg_425 <= icmp_ln32_1_fu_247_p2;
        icmp_ln32_5_reg_415 <= icmp_ln32_5_fu_238_p2;
        icmp_ln32_8_reg_405 <= icmp_ln32_8_fu_229_p2;
        sub_ln29_1_reg_410 <= sub_ln29_1_fu_234_p2;
        sub_ln29_2_reg_400 <= sub_ln29_2_fu_224_p2;
        sub_ln29_3_reg_390 <= sub_ln29_3_fu_214_p2;
        sub_ln29_reg_420 <= sub_ln29_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln26_1_reg_355 <= grp_fu_202_p2;
        icmp_ln26_reg_345 <= grp_fu_196_p2;
        wlsb_window_value_load_1_reg_350 <= wlsb_window_value_q0;
        wlsb_window_value_load_reg_340 <= wlsb_window_value_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln8_reg_316 <= icmp_ln8_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_k_out_ap_vld == 1'b1))) begin
        k_loc_fu_48 <= grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_k_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        targetBlock_reg_450 <= grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_return;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_316 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        if ((cond_fu_279_p2 == 1'd1)) begin
            ap_phi_mux_bits_nr_phi_fu_164_p6 = 6'd32;
        end else if ((cond_fu_279_p2 == 1'd0)) begin
            ap_phi_mux_bits_nr_phi_fu_164_p6 = k_cast_cast_fu_284_p1;
        end else begin
            ap_phi_mux_bits_nr_phi_fu_164_p6 = bits_nr_reg_160;
        end
    end else begin
        ap_phi_mux_bits_nr_phi_fu_164_p6 = bits_nr_reg_160;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        wlsb_window_used_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        wlsb_window_used_address0 = 64'd1;
    end else begin
        wlsb_window_used_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        wlsb_window_used_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        wlsb_window_used_address1 = 64'd0;
    end else begin
        wlsb_window_used_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        wlsb_window_used_ce0 = 1'b1;
    end else begin
        wlsb_window_used_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        wlsb_window_used_ce1 = 1'b1;
    end else begin
        wlsb_window_used_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        wlsb_window_value_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        wlsb_window_value_address0 = 64'd1;
    end else begin
        wlsb_window_value_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        wlsb_window_value_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        wlsb_window_value_address1 = 64'd0;
    end else begin
        wlsb_window_value_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        wlsb_window_value_ce0 = 1'b1;
    end else begin
        wlsb_window_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        wlsb_window_value_ce1 = 1'b1;
    end else begin
        wlsb_window_value_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln8_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((icmp_ln8_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_4_fu_270_p2 = ($signed(sub_ln29_fu_243_p2) + $signed(32'd4294967295));

assign add_ln30_5_fu_264_p2 = ($signed(sub_ln29_1_fu_234_p2) + $signed(32'd4294967295));

assign add_ln30_6_fu_258_p2 = ($signed(sub_ln29_2_fu_224_p2) + $signed(32'd4294967295));

assign add_ln30_fu_252_p2 = ($signed(sub_ln29_3_fu_214_p2) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = ap_phi_mux_bits_nr_phi_fu_164_p6;

assign cond_fu_279_p2 = ((targetBlock_reg_450 == 2'd0) ? 1'b1 : 1'b0);

assign grp_fu_196_p2 = ((wlsb_window_used_q1 == 32'd0) ? 1'b1 : 1'b0);

assign grp_fu_202_p2 = ((wlsb_window_used_q0 == 32'd0) ? 1'b1 : 1'b0);

assign grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start = grp_wlsb_get_minkp_32bits_Pipeline_VITIS_LOOP_16_1_fu_174_ap_start_reg;

assign icmp_ln32_10_fu_219_p2 = ((sub_ln29_3_fu_214_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_247_p2 = ((sub_ln29_fu_243_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln32_5_fu_238_p2 = ((sub_ln29_1_fu_234_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln32_8_fu_229_p2 = ((sub_ln29_2_fu_224_p2 > value_r) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_208_p2 = ((wlsb_count == 8'd0) ? 1'b1 : 1'b0);

assign k_cast_cast_fu_284_p1 = k_loc_fu_48;

assign sub_ln29_1_fu_234_p2 = (wlsb_window_value_load_1_reg_350 - p);

assign sub_ln29_2_fu_224_p2 = (wlsb_window_value_q1 - p);

assign sub_ln29_3_fu_214_p2 = (wlsb_window_value_q0 - p);

assign sub_ln29_fu_243_p2 = (wlsb_window_value_load_reg_340 - p);

endmodule //wlsb_get_minkp_32bits
